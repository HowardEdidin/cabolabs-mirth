<channel version="3.4.1">
  <id>7b1ca6ce-6cd9-42a9-a9a0-4ce784ad33b2</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>0003_process_http_xml</name>
  <description>Canal que recibe un pedido HTTP con:&#xd;
&#xd;
Cuerpo:&#xd;
&#xd;
&lt;mensaje&gt;&#xd;
    &lt;persona&gt;&#xd;
        &lt;nombre&gt;Pablo&lt;/nombre&gt;&#xd;
    &lt;/persona&gt;&#xd;
&lt;/mensaje&gt;&#xd;
&#xd;
Parametro: parametro1 (si es vac√≠o falla el source filter y retorna un error)&#xd;
&#xd;
Header: Authorization&#xd;
&#xd;
&#xd;
&#xd;
</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1469412656307</time>
    <timezone>America/Cayenne</timezone>
  </lastModified>
  <revision>12</revision>
  <sourceConnector version="3.4.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.4.1">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.4.1">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.4.1">
        <host>0.0.0.0</host>
        <port>1235</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.4.1">
        <responseVariable>Response</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>true</xmlBody>
      <parseMultipart>false</parseMultipart>
      <includeMetadata>true</includeMetadata>
      <binaryMimeTypes>application/, image/, video/, audio/</binaryMimeTypes>
      <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
      <responseContentType>text/plain</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode></responseStatusCode>
      <responseHeaders class="linked-hash-map">
        <entry>
          <string>estado</string>
          <list>
            <string>${estado}</string>
          </list>
        </entry>
        <entry>
          <string>Access-Control-Allow-Origin</string>
          <list>
            <string>*</string>
          </list>
        </entry>
      </responseHeaders>
      <charset>UTF-8</charset>
      <contextPath>canalHttp1235</contextPath>
      <timeout>0</timeout>
      <staticResources/>
    </properties>
    <transformer version="3.4.1">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>logger</name>
          <script>logger.info(&apos;Transformer msg ...&apos;);
logger.info(msg);

logger.info(&apos;Channel map get &quot;estado&quot; ...&apos;);
logger.info(channelMap.get(&apos;estado&apos;));

logger.info(&apos;Param: parametro1&apos;);
logger.info(msg[&apos;Parameters&apos;][&apos;parametro1&apos;]);

// if (&apos;xml&apos; === typeof msg &amp;&amp; msg.hasSimpleContent()) { msg = msg.toXMLString(); }if (&apos;xml&apos; === typeof tmp &amp;&amp; tmp.hasSimpleContent()) { tmp = tmp.toXMLString(); }

logger.info(typeof msg[&apos;Parameters&apos;][&apos;parametro1&apos;]);

logger.info(&apos;Header: Authorization&apos;);
logger.info(msg[&apos;Header&apos;][&apos;Authorization&apos;]);



/* Se verifica en filters ...

logger.info( [&apos;&apos;, undefined, null].indexOf(msg[&apos;Parameters&apos;][&apos;mensaje&apos;].toString()) );

var estado = (( [&apos;&apos;, undefined, null].indexOf(msg[&apos;Parameters&apos;][&apos;mensaje&apos;].toString()) == -1 ) ? &quot;ok&quot; : &quot;error&quot;);
globalChannelMap.put(&apos;estado&apos;, estado);
*/</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>logger.info(&apos;Transformer msg ...&apos;);
logger.info(msg);

logger.info(&apos;Channel map get &quot;estado&quot; ...&apos;);
logger.info(channelMap.get(&apos;estado&apos;));

logger.info(&apos;Param: parametro1&apos;);
logger.info(msg[&apos;Parameters&apos;][&apos;parametro1&apos;]);

// if (&apos;xml&apos; === typeof msg &amp;&amp; msg.hasSimpleContent()) { msg = msg.toXMLString(); }if (&apos;xml&apos; === typeof tmp &amp;&amp; tmp.hasSimpleContent()) { tmp = tmp.toXMLString(); }

logger.info(typeof msg[&apos;Parameters&apos;][&apos;parametro1&apos;]);

logger.info(&apos;Header: Authorization&apos;);
logger.info(msg[&apos;Header&apos;][&apos;Authorization&apos;]);



/* Se verifica en filters ...

logger.info( [&apos;&apos;, undefined, null].indexOf(msg[&apos;Parameters&apos;][&apos;mensaje&apos;].toString()) );

var estado = (( [&apos;&apos;, undefined, null].indexOf(msg[&apos;Parameters&apos;][&apos;mensaje&apos;].toString()) == -1 ) ? &quot;ok&quot; : &quot;error&quot;);
globalChannelMap.put(&apos;estado&apos;, estado);
*/</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <name>Extrae XML del request HTML</name>
          <script>/* mensajeXML en el cuerpo del request HTTP
&lt;mensaje&gt;
    &lt;persona&gt;
        &lt;nombre&gt;Pablo&lt;/nombre&gt;
    &lt;/persona&gt;
&lt;/mensaje&gt;

SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(message);
*/

// El cuerpo del Request HTTP en XML viene codificado en base64
// Esto decodifica y obtiene el objeto XML
var base64 = msg[&apos;Content&apos;].toString();
var decoded = FileUtil.decode(base64);
var decodedAsString = Packages.java.lang.String(decoded);
var mensajeXML = new XML(decodedAsString);

logger.info(&apos;mensajeXML&apos;);
logger.info(mensajeXML);
logger.info(typeof mensajeXML); // xml

logger.info(&apos;mensaje[persona][nombre]&apos;);
logger.info(mensajeXML[&apos;persona&apos;][&apos;nombre&apos;]);

/*
logger.info(&apos;Mensaje XML extraido ...&apos;);
logger.info(mensajeXML);
logger.info(typeof mensajeXML);
*/

// La salida del conector de entrada va a ser solo el XML del pedido HTTP
// Esto es lo que entra a las destinations
msg = mensajeXML;</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>/* mensajeXML en el cuerpo del request HTTP
&lt;mensaje&gt;
    &lt;persona&gt;
        &lt;nombre&gt;Pablo&lt;/nombre&gt;
    &lt;/persona&gt;
&lt;/mensaje&gt;

SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(message);
*/

// El cuerpo del Request HTTP en XML viene codificado en base64
// Esto decodifica y obtiene el objeto XML
var base64 = msg[&apos;Content&apos;].toString();
var decoded = FileUtil.decode(base64);
var decodedAsString = Packages.java.lang.String(decoded);
var mensajeXML = new XML(decodedAsString);

logger.info(&apos;mensajeXML&apos;);
logger.info(mensajeXML);
logger.info(typeof mensajeXML); // xml

logger.info(&apos;mensaje[persona][nombre]&apos;);
logger.info(mensajeXML[&apos;persona&apos;][&apos;nombre&apos;]);

/*
logger.info(&apos;Mensaje XML extraido ...&apos;);
logger.info(mensajeXML);
logger.info(typeof mensajeXML);
*/

// La salida del conector de entrada va a ser solo el XML del pedido HTTP
// Esto es lo que entra a las destinations
msg = mensajeXML;</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.1">
      <rules>
        <rule>
          <sequenceNumber>0</sequenceNumber>
          <name>estado = error por defecto</name>
          <data>
            <entry>
              <string>Script</string>
              <string>var estado = &quot;error&quot;;

// Deja el valor disponible para ponerlo en el header de la respuesta
// Ver Source &gt; Response Headers
channelMap.put(&apos;estado&apos;, estado);

// Deja el valor disponible para la respuesta
// Ver Source &gt; Response Settings &gt; Response
responseMap.put(&apos;Response&apos;, estado);

// El filtro debe retornar true para seguir ejecutando la siguiente regla
return true;</string>
            </entry>
          </data>
          <type>JavaScript</type>
          <script>var estado = &quot;error&quot;;

// Deja el valor disponible para ponerlo en el header de la respuesta
// Ver Source &gt; Response Headers
channelMap.put(&apos;estado&apos;, estado);

// Deja el valor disponible para la respuesta
// Ver Source &gt; Response Settings &gt; Response
responseMap.put(&apos;Response&apos;, estado);

// El filtro debe retornar true para seguir ejecutando la siguiente regla
return true;</script>
          <operator>NONE</operator>
        </rule>
        <rule>
          <sequenceNumber>1</sequenceNumber>
          <name>Accept message if &quot;msg[&apos;Parameters&apos;][&apos;parametro1&apos;].toString()&quot; does not equal &apos;&apos; or null or undefined</name>
          <data>
            <entry>
              <string>Field</string>
              <string>msg[&apos;Parameters&apos;][&apos;parametro1&apos;].toString()</string>
            </entry>
            <entry>
              <string>Name</string>
              <string></string>
            </entry>
            <entry>
              <string>OriginalField</string>
              <string></string>
            </entry>
            <entry>
              <string>Equals</string>
              <string>0</string>
            </entry>
            <entry>
              <string>Values</string>
              <list>
                <string>&apos;&apos;</string>
                <string>null</string>
                <string>undefined</string>
              </list>
            </entry>
          </data>
          <type>Rule Builder</type>
          <script>if(msg[&apos;Parameters&apos;][&apos;parametro1&apos;].toString() != &apos;&apos; &amp;&amp; msg[&apos;Parameters&apos;][&apos;parametro1&apos;].toString() != null &amp;&amp; msg[&apos;Parameters&apos;][&apos;parametro1&apos;].toString() != undefined) {
	return true;
}
return false;</script>
          <operator>AND</operator>
        </rule>
        <rule>
          <sequenceNumber>2</sequenceNumber>
          <name>estado = ok</name>
          <data>
            <entry>
              <string>Script</string>
              <string>// Llega aqui si la regla 2 pasa, donde se verifica que el mensaje no sea vacio.
var estado = &quot;ok&quot;;

// Deja el valor disponible para ponerlo en el header de la respuesta
// Ver Source &gt; Response Headers
channelMap.put(&apos;estado&apos;, estado);

// Deja el valor disponible para la respuesta
// Ver Source &gt; Response Settings &gt; Response
responseMap.put(&apos;Response&apos;, estado);

// Sigue para ejecutar los filtros
return true;</string>
            </entry>
          </data>
          <type>JavaScript</type>
          <script>// Llega aqui si la regla 2 pasa, donde se verifica que el mensaje no sea vacio.
var estado = &quot;ok&quot;;

// Deja el valor disponible para ponerlo en el header de la respuesta
// Ver Source &gt; Response Headers
channelMap.put(&apos;estado&apos;, estado);

// Deja el valor disponible para la respuesta
// Ver Source &gt; Response Settings &gt; Response
responseMap.put(&apos;Response&apos;, estado);

// Sigue para ejecutar los filtros
return true;</script>
          <operator>AND</operator>
        </rule>
      </rules>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.1">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.4.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/mirth_destinations</host>
        <outputPattern>${message.messageId}.txt</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="3.4.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.1">
        <rules/>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.1">
      <metaDataId>2</metaDataId>
      <name>Destination 2</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>responseMap.put(&apos;Response&apos;, $(&apos;estado&apos;));
</script>
      </properties>
      <transformer version="3.4.1">
        <steps/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.1">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.1">
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>