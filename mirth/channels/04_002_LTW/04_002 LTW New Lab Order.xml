<channel version="3.4.2">
  <id>75bf8672-6ace-4a07-8841-8bd2e94f335a</id>
  <nextMetaDataId>5</nextMetaDataId>
  <name>04_002 LTW New Lab Order</name>
  <description></description>
  <enabled>true</enabled>
  <lastModified>
    <time>1509307933481</time>
    <timezone>America/Montevideo</timezone>
  </lastModified>
  <revision>68</revision>
  <sourceConnector version="3.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.tcp.TcpReceiverProperties" version="3.4.2">
      <pluginProperties/>
      <listenerConnectorProperties version="3.4.2">
        <host>0.0.0.0</host>
        <port>6780</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.4.2">
        <responseVariable>orl_resp</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>true</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
        <pluginPointName>MLLP</pluginPointName>
        <startOfMessageBytes>0B</startOfMessageBytes>
        <endOfMessageBytes>1C0D</endOfMessageBytes>
        <useMLLPv2>false</useMLLPv2>
        <ackBytes>06</ackBytes>
        <nackBytes>15</nackBytes>
        <maxRetries>2</maxRetries>
      </transmissionModeProperties>
      <serverMode>true</serverMode>
      <remoteAddress></remoteAddress>
      <remotePort></remotePort>
      <overrideLocalBinding>false</overrideLocalBinding>
      <reconnectInterval>5000</reconnectInterval>
      <receiveTimeout>0</receiveTimeout>
      <bufferSize>65536</bufferSize>
      <maxConnections>10</maxConnections>
      <keepConnectionOpen>true</keepConnectionOpen>
      <dataTypeBinary>false</dataTypeBinary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
      <respondOnNewConnection>0</respondOnNewConnection>
      <responseAddress></responseAddress>
      <responsePort></responsePort>
    </properties>
    <transformer version="3.4.2">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>id_paciente</name>
          <script>var mapping;

try {
	mapping = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;id_paciente&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>id_paciente</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>1</sequenceNumber>
          <name>nombre</name>
          <script>var mapping;

try {
	mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;nombre&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>nombre</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>2</sequenceNumber>
          <name>apellido</name>
          <script>var mapping;

try {
	mapping = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;apellido&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>apellido</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>3</sequenceNumber>
          <name>nacimiento</name>
          <script>var mapping;

try {
	mapping = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;nacimiento&apos;, validate( mapping , &apos;&apos;, new Array(new Array(﻿&apos;(\\d{4})(\\d{2})(\\d{2})&apos;, ﻿&apos;$1-$2-$3&apos;))));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>nacimiento</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list>
                <string-array>
                  <string>﻿&apos;(\\d{4})(\\d{2})(\\d{2})&apos;</string>
                  <string>﻿&apos;$1-$2-$3&apos;</string>
                </string-array>
              </list>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>4</sequenceNumber>
          <name>sexo</name>
          <script>var mapping;

try {
	mapping = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;sexo&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>sexo</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>5</sequenceNumber>
          <name>objeto_paciente</name>
          <script>var paciente = {};

paciente.id_paciente = $(&apos;id_paciente&apos;);
paciente.nombre      = $(&apos;nombre&apos;);
paciente.apellido    = $(&apos;apellido&apos;);
paciente.nacimiento  = $(&apos;nacimiento&apos;);
paciente.sexo        = $(&apos;sexo&apos;);

channelMap.put(&apos;paciente&apos;, paciente);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var paciente = {};

paciente.id_paciente = $(&apos;id_paciente&apos;);
paciente.nombre      = $(&apos;nombre&apos;);
paciente.apellido    = $(&apos;apellido&apos;);
paciente.nacimiento  = $(&apos;nacimiento&apos;);
paciente.sexo        = $(&apos;sexo&apos;);

channelMap.put(&apos;paciente&apos;, paciente);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>6</sequenceNumber>
          <name>id_estudio_his</name>
          <script>var mapping;

try {
	mapping = msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;id_estudio_his&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>id_estudio_his</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>7</sequenceNumber>
          <name>tipo_estudio</name>
          <script>var mapping;

try {
	mapping = msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;tipo_estudio&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>tipo_estudio</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>8</sequenceNumber>
          <name>nombre_estudio</name>
          <script>var mapping;

try {
	mapping = msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;nombre_estudio&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>nombre_estudio</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>9</sequenceNumber>
          <name>codificacion_estudio</name>
          <script>var mapping;

try {
	mapping = msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.3&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;codificacion_estudio&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>codificacion_estudio</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.3&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>10</sequenceNumber>
          <name>estado_orden</name>
          <script>var mapping;

try {
	mapping = msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString(); 
} catch (e) {
	logger.error(e);
	mapping = &apos;&apos;;
}

channelMap.put(&apos;estado_orden&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
          <type>Mapper</type>
          <data>
            <entry>
              <string>Variable</string>
              <string>estado_orden</string>
            </entry>
            <entry>
              <string>Mapping</string>
              <string>msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>DefaultValue</string>
              <string></string>
            </entry>
            <entry>
              <string>RegularExpressions</string>
              <list/>
            </entry>
            <entry>
              <string>isGlobal</string>
              <string>channel</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>11</sequenceNumber>
          <name>objeto_orden</name>
          <script>var orden = {};

orden.id_estudio_his        = $(&apos;id_estudio_his&apos;);
orden.tipo_estudio          = $(&apos;tipo_estudio&apos;);
orden.nombre_estudio        = $(&apos;nombre_estudio&apos;);
orden.codificacion_estudio  = $(&apos;codificacion_estudio&apos;);
orden.estado                = $(&apos;estado_orden&apos;);

channelMap.put(&apos;orden&apos;, orden);</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var orden = {};

orden.id_estudio_his        = $(&apos;id_estudio_his&apos;);
orden.tipo_estudio          = $(&apos;tipo_estudio&apos;);
orden.nombre_estudio        = $(&apos;nombre_estudio&apos;);
orden.codificacion_estudio  = $(&apos;codificacion_estudio&apos;);
orden.estado                = $(&apos;estado_orden&apos;);

channelMap.put(&apos;orden&apos;, orden);</string>
            </entry>
          </data>
        </step>
        <step>
          <sequenceNumber>12</sequenceNumber>
          <name>objeto_paciente_orden</name>
          <script>var paciente_orden = {};

paciente_orden.paciente = $(&apos;paciente&apos;);
paciente_orden.orden    = $(&apos;orden&apos;);

//msg = JSON.stringify( paciente_orden );
msg = paciente_orden;</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var paciente_orden = {};

paciente_orden.paciente = $(&apos;paciente&apos;);
paciente_orden.orden    = $(&apos;orden&apos;);

//msg = JSON.stringify( paciente_orden );
msg = paciente_orden;</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">TVNIfF5+XCZ8T1B8SElTfE9GfExJU3wyMDAzMDkwNjA4MjB8fE9NTF5PMjFeT01MX08yMXwxMjM0
NXxUfDIuNS4xDVBJRHwxfHwxMjM0NV41Xk0xMF5NZW1waGlzX0hvc3BeUEl8fEVWRVJZTUFOXkFE
QU1eXkpSXl5eTHx8MTk4MDAxMDF8TQ1QVjF8MXxPfFdhcmR8fHx8fHx8fHx8fHx8fHwxMjM0NQ1P
UkN8Tld8MTIzNF5ISVN8fDY2Nl5nYXN0cmljfHx8fHwyMDAzMDkwNjA3MTB8MjIyMjIxXk5VUlNF
Xk5BTkNZfHx8fHx8fHx8fHxFbnRlcm8tZ2FzdHJpY15eXl5eXkZJXl5eRUcwMg1UUTF8fHx8fHx8
fHxBDU9CUnx8MTIzNF5ISVN8fDgyOTUxXkdsdWNvc2UgVG9sZXJhbmNlIFRlc3ReQzR8fHx8fHwx
MjM0XkJMRUVERVJ8UHx8fHx8MjIyMjIyXlBIWVNJQ0lBTl5eXl5EUnw4MjENT0JYfDF8Tk18R0xV
Q09TRXx8NzV8Z3x8fHx8Rnx8fDIwMDMwOTA2MDczNQ1TUE18MXwxMjM0LTFeSElTfHxTRVJ8fHx8
fHx8UHx8fHx8fDIwMDMwOTA2MDczNXx8fHx8fHx8fDENU1BNfDJ8MTIzNC0yXkhJU3x8U0VSfHx8
fHx8fFB8fHx8fHwyMDAzMDkwNjA3NTV8fHx8fHx8fHwxDVNQTXwzfDEyMzQtM15ISVN8fFNFUnx8
fHx8fHxQfHx8fHx8MjAwMzA5MDYwODE1fHx8fHx8fHx8MQ==</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.4.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.4.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.4.2">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.4.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.4.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.4.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.2">
      <rules>
        <rule>
          <sequenceNumber>0</sequenceNumber>
          <name>Accept message if &quot;MSH - MSH.9 - MSH.9.1&quot; equals &apos;OML&apos;</name>
          <data>
            <entry>
              <string>Field</string>
              <string>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>Name</string>
              <string>MSH - MSH.9 - MSH.9.1</string>
            </entry>
            <entry>
              <string>OriginalField</string>
              <string>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>Equals</string>
              <string>1</string>
            </entry>
            <entry>
              <string>Values</string>
              <list>
                <string>&apos;OML&apos;</string>
              </list>
            </entry>
          </data>
          <type>Rule Builder</type>
          <script>if(msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &apos;OML&apos;) {
	return true;
}
return false;</script>
          <operator>NONE</operator>
        </rule>
        <rule>
          <sequenceNumber>1</sequenceNumber>
          <name>Accept message if &quot;ORC - ORC.1 - ORC.1.1&quot; equals &apos;NW&apos;</name>
          <data>
            <entry>
              <string>Field</string>
              <string>msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>Name</string>
              <string>ORC - ORC.1 - ORC.1.1</string>
            </entry>
            <entry>
              <string>OriginalField</string>
              <string>msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString()</string>
            </entry>
            <entry>
              <string>Equals</string>
              <string>1</string>
            </entry>
            <entry>
              <string>Values</string>
              <list>
                <string>&apos;NW&apos;</string>
              </list>
            </entry>
          </data>
          <type>Rule Builder</type>
          <script>if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString() == &apos;NW&apos;) {
	return true;
}
return false;</script>
          <operator>AND</operator>
        </rule>
      </rules>
    </filter>
    <transportName>TCP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.2">
      <metaDataId>3</metaDataId>
      <name>Test</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <script>
logger.info(connectorMessage.getEncodedData());

logger.info(typeof connectorMessage.getEncodedData());

var mesg = connectorMessage.getEncodedData();

logger.info( mesg.paciente );

mesg = JSON.parse(connectorMessage.getEncodedData());

logger.info( mesg.paciente.nacimiento );

</script>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>1</metaDataId>
      <name>Guarda paciente</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>jdbc:mysql://127.0.0.1:3306/mirth_tests</url>
        <username>root</username>
        <password></password>
        <query>INSERT INTO `pacientes_lis`
  (`nombre`, `apellido`, `nacimiento`, `sexo`, `id_paciente`)
VALUES 
  (
${nombre},
${apellido},
${nacimiento},
${sexo},
${id_paciente}
  )
</query>
        <useScript>false</useScript>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.2">
      <metaDataId>2</metaDataId>
      <name>Guarda orden</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>jdbc:mysql://127.0.0.1:3306/mirth_tests</url>
        <username>root</username>
        <password></password>
        <query>INSERT INTO `estudios_lis`
  (`id_estudio_his`, `tipo_estudio`, `nombre_estudio`, `codificacion_estudio`, `id_paciente`, `estado`)
VALUES 
  (
${id_estudio_his},
${tipo_estudio},
${nombre_estudio},
${codificacion_estudio},
${id_paciente},
${estado_orden}
  )</query>
        <useScript>false</useScript>
      </properties>
      <transformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.2">
        <rules/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

// message is ImmutableConnectorMessage
// http://javadocs.mirthcorp.com/connect/3.0.0/user-api/com/mirth/connect/userutil/ImmutableConnectorMessage.html

// This gets the original inbound message on the source connector
var original_message = message.getConnectorMessages().get(0).getRawData();

// http://207.38.40.43/community/forums/showthread.php?p=44212
var orl_str = ACKGenerator.generateAckResponse(original_message, &quot;AA&quot;, &quot;Message Successfully Received&quot;); // ACK string

logger.info(orl_str);


// from HL7 ACK string to XML
var serializer = SerializerFactory.getSerializer(&apos;HL7V2&apos;);
var orl = new XML( serializer.toXML( orl_str ) );

logger.info(orl);

// change ACK to ORL (OML^O22 response)
orl[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = &apos;ORL&apos;;
orl[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = &apos;O22&apos;;
orl[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &apos;ORL_O22&apos;;


// HL7 XML -&gt; hL7 string -&gt; response object
var orl_response = ResponseFactory.getSentResponse( serializer.fromXML( orl.toString() ) );

logger.info(orl_response);


responseMap.put(&quot;orl_resp&quot;, orl_response);


return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>